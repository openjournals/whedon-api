Here are some things you can ask me to do:

```
# List all of RoboNeuro's capabilities
@roboneuro commands

# Assign a GitHub user as the sole reviewer of this submission
@roboneuro assign @username as reviewer

# Add a GitHub user to the reviewers of this submission
@roboneuro add @username as reviewer

# Re-invite a reviewer (if they can't update checklists)
@roboneuro re-invite @username as reviewer

# Remove a GitHub user from the reviewers of this submission
@roboneuro remove @username as reviewer

# List of editor GitHub usernames
@roboneuro list editors

# List of reviewers together with programming language preferences and domain expertise
@roboneuro list reviewers

# Change editorial assignment
@roboneuro assign @username as editor

# Set the software version at the top of the issue e.g.
@roboneuro set v1.0.1 as version

# Open the review issue
@roboneuro start review

EDITORIAL TASKS

# All commands can be run on a non-default branch, to do this pass a custom
# branch name by following the command with `from branch custom-branch-name`.
# For example:

# Compile the paper
@roboneuro generate pdf

# Compile the paper from alternative branch
@roboneuro generate pdf from branch custom-branch-name

# Build the NeuroLibre book (on the test server)
@roboneuro generate nl-notebook

# Build the NeuroLibre book from alternative branch (on the test server)
@roboneuro generate nl-notebook from branch custom-branch-name

PRODUCTION TASKS (Auth level editor)

# Start production sequence [fork-> config -> build (book and binder) -> sync (data and book)]
@roboneuro production start

# Production sequence processes can be called individually if `@roboneruo production start` is interrupted at some point.
@roboneuro production build-book
@roboneuro production sync-book
@roboneuro production sync-data
@roboneuro production build-binderhub

ARCHIVAL TASKS (Auth level editor)

# Displays Zenodo deposit, upload and publish status
@roboneuro zenodo status

# Create Zenodo records for archiving resources
@roboneuro zenodo deposit

# Uploads all resources to respective Zenodo deposits for archival
@roboneuro zenodo archive-all

# Zenodo uploads can be performed individually
@roboneuro zenodo archive-docker
@roboneuro zenodo archive-book
@roboneuro zenodo archive-repository
@roboneuro zenodo archive-data

# Destroy all the zenodo resources (cannot be called after publishing, cannot be performed for individual items)
@roboneuro zenodo flush

PUBLISHING TASKS

# Set the final book URL for publishing (Editor)
@roboneuro production set-book-url

# Publish all the Zenodo archives (EiC & zenodo status must be green for all types)
@roboneuro zenodo publish

# Set all the Zenodo DOIs for publishing (Editor)
@roboneuro production set-zenodo-dois

# Ask RoboNeuro to do a dry run of accepting the paper and depositing with Crossref (Editor)
@roboneuro accept

# Ask RoboNeuro to check the references for missing DOIs
@roboneuro check references

# Ask RoboNeuro to check repository statistics for the submitted software
@roboneuro check repository

# Remind an author or reviewer to return to a review after a
# certain period of time (supported units days and weeks)
@roboneuro remind @reviewer in 2 days

EiC TASKS

# Invite an editor to edit a submission (sending them an email)
@roboneuro invite @editor as editor

# Reject a paper
@roboneuro reject

# Withdraw a paper
@roboneuro withdraw

# Ask RoboNeuro to actually accept the paper and deposit with Crossref
@roboneuro accept deposit=true

```
